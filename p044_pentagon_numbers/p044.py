"""
Pentagonal numbers are generated by the formula, P_n = n(3n-1)/2. The first ten
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference,
70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P_j and P_k, for which their sum and
difference are pentagonal and D = |P_k - P_j| is minimised; what is the value
of D?
"""

from constants import MAIN_PROCESS

__author__ = 'Scott'


def compute_pentagonal(n):
    """
    Computes n'th pentagonal number
    :param n: int
    :return: n't pentagonal number
    """
    assert isinstance(n, int), "n must be integer, you sent in {}".format(n)
    assert n >=1, "n must be >= 1, you sent in {}".format(n)

    return (n * (3 * n - 1)) / 2


# TODO: Fix this, it's only been copied from prime_generator and had a few
# variable name changes
# def pentagonal_generator(n):
#     """
#     generates pentagonals less than or equal to n in order
#     :param n: upper limit of possible pentagonals, inclusive
#     :return: yields each pentagonal <= n
#     """
#     known_pents = []
#     i = 0
#     while i < n:
#         i += 1
#         pents_to_check = [kp for kp in known_pents if kp <= i/2]
#         for prime in pents_to_check:
#             if i % prime == 0:
#                 break
#         else:
#             known_pents.append(i)
#             yield i


if __name__ == MAIN_PROCESS:
    pass
    # pseudocode
    #